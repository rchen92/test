##一个正常运行的数据库通常包括下面这些表空间
##创建表空间
##表空间属性
#表空间的状态
#表空间名称的修改
#表空间大小的改变
##手动改变数据文件大小
##表空间文件的重命名和重定位
##删除表空间
##获取表空间和数据文件信息



database

tablespace		data file

segment

extent

db block		os block


用户--> 对象：表，视图，包 ... 同义词--> 表空间--> 段--> 区--> 内存块--> OS块
											↓			  ↓				  ↓
										数据文件		数据文件		数据文件

		表空间 段 区 内存块：逻辑结构
		OS块 数据文件：物理结构
		用户 对象：schema

表空间是逻辑存储概念，一个表空间是一个或多个数据文件的逻辑集合
存储对象（表、索引）逻辑的存储在表空间上，而存储对象的数据物理的存放在数据文件上
数据库至少需要一个叫做system的表空间，也就是系统表空间
一个表空间至少包括一个数据文件，数据文件是最终的数据存储体，一个数据文件只属于一个表空间

通常一个数据库由多个表空间构成，每个表空间存储不同特性的数据
一个正常运行的数据库通常包括下面这些表空间：
	system：存放数据字典信息，是数据库必须的表空间，也是创建数据库时第一个被创建的表空间
	sysaux：存放除了数据字典之外的一些系统管理辅助信息，用于分担系统表空间的负荷
	undo：存放自动端粒的回滚段信息，提供事务的回滚功能
	temp：存放用户排序时的临时数据
	index：存放用户表上的索引信息
	其他：存放各种不同的用户表数据
除了system和sysaux表空间必须在创建数据库的时候创建外，其他表空间都可以在数据库生成后由DBA创建并进行管理，通常对系统表空间的管理任务较少


##创建表空间：
create tablespace dataname datafile <'dir/datafilename'>;
create tablespace f1 datafile '/u01/app/oracle/oradata/orcl/f1.dbf' size 100m;
create undo tablespace ...;		#创建undo表空间
create temporary tablespace ...;		#创建临时表空间

确定必须具备create tablespace的权限
	dba role，sysdba，sysoper以及被授权创建表空间权限的用户
确定smallfile还是bigfile
	单个文件超过256G，使用bigfile。一个数据文件当中可以具备4G个os块，一个2k的块，则单个文件大小 =4G*2K = 8T
																		4k						 4G*4K = 16T
	smallfile	1T	4*256GB --> 需要4个datafile 
	bigfile		1T  8T/8	--> 只需要1个datafile 
	tablespace最多可以容纳1024个datafile
确定新建的表空间IO的分配

create tablespace
如果默认是smallfile，则是create smallfile tablespace
如果默认是bigfile，则是create bigfile tablespace
SQL> desc database_properties;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 PROPERTY_NAME				   NOT NULL VARCHAR2(30)
 PROPERTY_VALUE 				    VARCHAR2(4000)
 DESCRIPTION					    VARCHAR2(4000)
SQL> select property_name,property_value from database_properties where property_name like '%TBS%';
PROPERTY_NAME				PROPERTY_VALUE
------------------------	---------------------------
DEFAULT_TBS_TYPE			SMALLFILE	
SQL> alter database set default bigfile tablespace;				#修改是大表文件还是小表文件
SQL> select property_name,property_value from database_properties where property_name like '%TBS%';
PROPERTY_NAME				PROPERTY_VALUE
------------------------	---------------------------
DEFAULT_TBS_TYPE			BIGFILE

SQL> create tablespace f1 datafile '/u01/app/oracle/oradata/orcl/f1.dbf' size 100m;


##表空间属性：空间管理方法
表空间的空间管理是oracle描述表空间中空间分配状况的方法
本地管理表空间：
	直接在各个表空间上管理空闲空间和使用空间
	使用存储在表空间上的bitmap标示空间空间和使用空间的信息
	bitmap中的每位描述一个block或者一组block的状态

本地管理表空间使用bitmap描述空间分布情况，减少在数据字典中的竞争
不需要为每个段单独设置存储参数，在本地管理表空间上段的区大小遵循表空间的设置
当空间分配或者释放的时候不产生回滚信息，空间管理开销很小，对性能非常有好处，所以现在广泛采用LMT
	create tablespace datas
	datafile '/u01/app/oracle/oradata/orcl/datas01.dbf' SIZE 500M
	EXTENT MANAGEMENT LOCAL UNIFORM SIZE 128K;
SQL> create tablespace f2 datafile '/u01/app/oracle/oradata/orcl/f2.dbf' size 10m;
SQL> create tablespace f3 datafile '/u01/app/oracle/oradata/orcl/f3.dbf' size 10m extent management dictionary;
create tablespace f3 datafile '/u01/app/oracle/oradata/orcl/f3.dbf' size 10m extent management dictionary
*
ERROR at line 1:
ORA-12913: Cannot create dictionary managed tablespace		#不能创建字典管理表空间

SQL> select tablespace_name,extent_management from dba_tablespaces;
TABLESPACE_NAME 	       EXTENT_MAN
------------------------------ ----------
SYSTEM			       LOCAL
SYSAUX			       LOCAL
UNDOTBS1		       LOCAL
TEMP			       LOCAL
USERS			       LOCAL
EXAMPLE 		       LOCAL
F1					   LOCAL
F2			           LOCAL

#表空间的状态
表空间一旦创建好就可以使用了，永久类型表空间上可以由用户创建存储对象，临时类型表空间和还原类型表空间则由系统自动使用
在管理表空间时，表空间的状态决定了对表空间可以执行哪些操作
表空间状态分为下面四种：
	online
	offline
	read write
	read only
online/offline
	正常的表空间运行在online状态下，offline状态的表空间是不可以访问的，意味着表空间上所有的数据都不能被访问
	表空间在offline的时候会带来ckpt（checkpoint检查点）事件
	大多数表空间是可以offline的，但是也有些表空间不能被离线：
		系统表空间
		存在激活的回滚段的表空间
		默认的临时表空间
	alter tablespace users offline;
	alter tablespace users online;
	脱机和联机的功能用于某些特殊的场合，比如把数据文件进行备份或者恢复，但是又不想让oracle关闭，这个时候就可以在oracle运行的状态下完成某些数据的恢复的工作
read write/read only
	当表空间状态为offline时就不能访问了，所以只读/读写的状态只会出现在online的表空间上
	正常的表空间运行在online并且read write状态下
	只读表空间意味着表空间上的数据只能被查询，不能做任何修改
	当表空间状态被修改为只读时，将引起这个表空间上的检查点事件
	只读表空间上的对象可以被删除，只是不能执行DML语句操作
	alter tablespace users read only;
	alter tablespace users read write;


	tablespace		status			enabled
	system			必须online		必须read write
	sysaux			可以offline		不能read only
	undo			不能offline		不能read only
	users			可以offline		可以read only
	example			可以offline		可以read only

SQL> select file#,status,enabled from v$datafile;
     FILE# STATUS  ENABLED
---------- ------- ----------
	 1 SYSTEM  READ WRITE
	 2 ONLINE  READ WRITE
	 3 ONLINE  READ WRITE
	 4 ONLINE  READ WRITE
	 5 ONLINE  READ WRITE
SQL> select tablespace_name,file#,v.status,v.enabled from dba_data_files d,v$datafile v where d.file_id=v.file#;
TABLESPACE_NAME 		    FILE# STATUS  ENABLED
------------------------------ ---------- ------- ----------
SYSTEM					1 SYSTEM  READ WRITE
SYSAUX					2 ONLINE  READ WRITE
UNDOTBS1				3 ONLINE  READ WRITE
USERS					4 ONLINE  READ WRITE
EXAMPLE 				5 ONLINE  READ WRITE

SQL> alter tablespace users read only;
Tablespace altered.
SQL> update scott.emp set sal=sal+1;
update scott.emp set sal=sal+1
             *
ERROR at line 1:
ORA-00372: file 4 cannot be modified at this time
ORA-01110: data file 4: '/u01/app/oracle/oradata/orcl/users01.dbf'
SQL> select tablespace_name,file#,v.status,v.enabled from dba_data_files d,v$datafile v where d.file_id=v.file#;
TABLESPACE_NAME 		    FILE# STATUS  ENABLED
------------------------------ ---------- ------- ----------
SYSTEM					1 SYSTEM  READ WRITE
SYSAUX					2 ONLINE  READ WRITE
UNDOTBS1				3 ONLINE  READ WRITE
USERS					4 ONLINE  READ ONLY
EXAMPLE 				5 ONLINE  READ WRITE
SQL> alter tablespace users read write;
SQL> update scott.emp set sal=sal+1;
SQL> alter tablespace users offline;
SQL> alter tablespace users online;

#表空间名称的修改
有些表空间名称不能修改
	system、sysaux
	下面几个不建议改，修改了可能会出问题
	database_properties-->users  temp	
	undo-->undo_tablespace
SQL> create tablespace t1 datafile '/u01/app/oracle/oradata/orcl/t1.dbf' size 10m;
SQL> alter tablespace t1 rename to t01;
SQL> select property_name,property_value from database_properties where property_name like '%DEFAU%';
PROPERTY_NAME						PROPERTY_VALUE
--------------------------------	------------------------------
DEFAULT_TEMP_TABLESPACE				TEMP
DEFAULT_PERMANENT_TABLESPACE		USERS
DEFAULT_EDITION						ORA$BASE
DEFAULT_TBS_TYPE					SMALLFILE

#表空间大小的改变
在表空间的管理过程中，确保表空间提供足够大的可用空间是一个基本的管理任务
表空间的大小由组成它的所有数据文件大小之和决定，所以改变表空间大小可以使用下面三个方法：
	启动数据文件大小的自动扩展
	手工改变数据文件大小
	为表空间增加数据文件

启动数据文件的自动扩展属性，能够在数据文件现有空间不足的情况下自动扩展新的空间以满足空间需求
	可以在多个命令中启用数据文件的自动扩展属性
		create database
		create tablespace
		alter tablespace ... add datafile
		alter database datafile ...
	例如：
	alter database datafile '/u01/app/oracle/oradata/orcl/datas01.dbf' autoextend on next 10m maxsize 500m;
查询dba_data_files可以查看数据文件是否启用了自动扩展属性
SQL> select file_name,tablespace_name,autoextensible from dba_data_files;
FILE_NAME										TABLESPACE_NAME        AUT
---------------------------------------------	---------------------- ---
/u01/app/oracle/oradata/orcl/users01.dbf		USERS			       YES
/u01/app/oracle/oradata/orcl/undotbs01.dbf		UNDOTBS1		       YES
/u01/app/oracle/oradata/orcl/system01.dbf		SYSTEM			       YES
/u01/app/oracle/oradata/orcl/sysaux01.dbf		SYSAUX			       YES
/u01/app/oracle/oradata/orcl/example01.dbf		EXAMPLE 		       YES
/u01/app/oracle/oradata/orcl/t1.dbf				T01					   NO
SQL> alter database datafile '/u01/app/oracle/oradata/orcl/t1.dbf' autoextend on;		#现在是自动扩张了
SQL> select file_name,tablespace_name,autoextensible from dba_data_files;
FILE_NAME										TABLESPACE_NAME        AUT
---------------------------------------------	---------------------- ---
/u01/app/oracle/oradata/orcl/users01.dbf		USERS			       YES
/u01/app/oracle/oradata/orcl/undotbs01.dbf		UNDOTBS1		       YES
/u01/app/oracle/oradata/orcl/system01.dbf		SYSTEM			       YES
/u01/app/oracle/oradata/orcl/sysaux01.dbf		SYSAUX			       YES
/u01/app/oracle/oradata/orcl/example01.dbf		EXAMPLE 		       YES
/u01/app/oracle/oradata/orcl/t1.dbf				T01					   YES
SQL> alter database datafile '/u01/app/oracle/oradata/orcl/t1.dbf' autoextend off;

手动改变数据文件大小
	#自动扩展数据文件大小对性能有一定影响，所以更建议手动扩展文件（这条忽略）
	建议使用自动扩展数据文件
	可以使用alter database命令在需要更多空间之前手动增大数据文件的大小
	也可以用这个命令去手动减小文件大小
	手动减小数据文件的大小就是回收未用的空间
		例如：alter database datafile '/u01/app/oracle/oradata/orcl/datas01.dbf' resize 200m;
	增大表空间也可以通过为表空间增加数据文件来实现
	增大到表空间中的数据文件不能直接从表空间中删除，除非删掉整个表空间
	文件越多，执行一次检查点的代价越高
	增加数据文件对均衡I/O有好处
		例如：alter tablespace datas add datafile '/u01/app/oracle/oradata/datas02.dbf' size 200m;

SQL> alter database datafile '/u01/app/oracle/oradata/orcl/t1.dbf' resize 2m;
SQL> create user t1 identified by t1 default tablespace t01;
SQL> grant connect,resource to t1;
SQL> conn t1/t1
SQL> create table t (id number,name varchar2(256));
SQL> begin
  2  for i in 1..500 loop
  3  insert into t values(i,'a||i');
  4  end loop;
  5  end;
  6  /
SQL> insert into t select * from t;
500 rows created.
SQL> /
1000 rows created.
SQL> /
2000 rows created.
SQL> /
4000 rows created.
SQL> /
8000 rows created.
SQL> /
16000 rows created.
SQL> /
insert into t select * from t
*
ERROR at line 1:
ORA-01653: unable to extend table T1.T by 128 in tablespace T01		#这时就会报表空间不足的错误
SQL> conn / as sysdba
SQL> select name,file# from v$datafile;
NAME										FILE#
-------------------------------------------	-----------
/u01/app/oracle/oradata/orcl/f2.dbf			7
/u01/app/oracle/oradata/orcl/t1.dbf			8
SQL> alter database datafile 8 resize 5m;
SQL> conn t1/t1
SQL> insert into t select * from t;
32000 rows created.
SQL> /
64000 rows created.
SQL> conn / as sysdba
SQL> alter database datafile 8 autoextend on;
SQL> alter tablespace t01 add datafile '/u01/app/oracle/oradata/orcl/t1_2.dbf' size 10m autoextend on;		#给表空间增加成员文件

#表空间文件的重命名和重定位
归档模式下才能改名
如果需要改变某个数据文件的名称或者目录，可以使用两种方法来实现，分别适合数据库的两种状态
如果数据库当前运行在open状态，按照下面的步骤执行：
	将需要重命名数据文件的表空间离线
	操作系统级移动数据文件（或者改名）
	执行下面的rename命令，执行之前目标数据文件必须存在
		alter tablespace t01 rename datafile '/u01/app/oracle/oradata/orcl/t1.dbf' to '/u01/app/oracle/oradata/orcl/t01.dbf';或者
		alter database rename file '/u01/app/oracle/oradata/orcl/t1.dbf' to '/u01/app/oracle/oradata/orcl/t01.dbf';
	将表空间online，online时将椒盐数据文件的状态是否正确
如果数据库没有open，那么按照下面的步骤执行
	启动数据库到mount状态
	操作系统级别拷贝移动数据文件
	执行下面的rename命令，执行之前目标参数文件必须存在
		alter database rename file '/u01/app/oracle/oradata/orcl/t1.dbf' to '/u01/app/oracle/oradata/orcl/t01.dbf';或者
		alter tablespace t01 rename datafile '/u01/app/oracle/oradata/orcl/t1.dbf' to '/u01/app/oracle/oradata/orcl/t01.dbf';
	打开数据库
SQL> alter tablespace t01 offline;
SQL> ho cp /u01/app/oracle/oradata/orcl/t1.dbf /u01/app/oracle/oradata/orcl/t01.dbf
SQL> alter tablespace t01 rename datafile '/u01/app/oracle/oradata/orcl/t1.dbf' to '/u01/app/oracle/oradata/orcl/t01.dbf';
SQL> alter tablespace t01 online;
SQL> select name from v$datafile;
NAME
--------------------------------------------
/u01/app/oracle/oradata/orcl/t01.dbf


#删除表空间
表空间如果不在需要了就可以删除，删除表空间意味着表空间和数据文件的信息从数据库中清除，同时也应该将相应的操作系统文件删除
有些表空间不能被直接删除，例如：
	系统表空间
	有活动回滚段的表空间
	默认临时/永久表空间
删除表空间的命令：
	drop tablespace t01 including contents and datafiles;
	including contents用于删除表空间的同时删除表空间上的所有段
	including contents and datafiles删除表空间、数据文件以及表空间上段的信息，同时删除操作系统中的数据文件
SQL> drop tablespace t01 including contents;
Tablespace dropped.
SQL> ho ls /u01/app/oracle/oradata/orcl/*
/u01/app/oracle/oradata/orcl/t01.dbf
/u01/app/oracle/oradata/orcl/t1_2.dbf

#获取表空间和数据文件信息
管理表空间首先需要了解数据库的表空间和数据文件信息
可以在下面的数据字典和动态性能视图中获取表空间和数据文件的信息
	表空间信息：
		dba_tablespaces
		v$tablespace
	数据文件信息：
		dba_data_files
		v$datafile
	表空间组：
		dba_tablespace_groups
	临时数据文件信息：
		dba_temp_files
		v$tempfile

SQL> desc dba_tablespaces;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 TABLESPACE_NAME			   NOT NULL VARCHAR2(30)
 BLOCK_SIZE				   NOT NULL NUMBER
 INITIAL_EXTENT 				    NUMBER
 NEXT_EXTENT					    NUMBER
 MIN_EXTENTS				   NOT NULL NUMBER
 MAX_EXTENTS					    NUMBER
 MAX_SIZE					    NUMBER
 PCT_INCREASE					    NUMBER
 MIN_EXTLEN					    NUMBER
 STATUS 					    VARCHAR2(9)
 CONTENTS					    VARCHAR2(9)
 LOGGING					    VARCHAR2(9)
 FORCE_LOGGING					    VARCHAR2(3)
 EXTENT_MANAGEMENT				    VARCHAR2(10)
 ALLOCATION_TYPE				    VARCHAR2(9)
 PLUGGED_IN					    VARCHAR2(3)
 SEGMENT_SPACE_MANAGEMENT			    VARCHAR2(6)
 DEF_TAB_COMPRESSION				    VARCHAR2(8)
 RETENTION					    VARCHAR2(11)
 BIGFILE					    VARCHAR2(3)
 PREDICATE_EVALUATION				    VARCHAR2(7)
 ENCRYPTED					    VARCHAR2(3)
 COMPRESS_FOR					    VARCHAR2(12)
SQL> desc v$tablespace;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 TS#						    NUMBER
 NAME						    VARCHAR2(30)
 INCLUDED_IN_DATABASE_BACKUP			    VARCHAR2(3)
 BIGFILE					    VARCHAR2(3)
 FLASHBACK_ON					    VARCHAR2(3)
 ENCRYPT_IN_BACKUP				    VARCHAR2(3)

SQL> desc dba_data_files;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 FILE_NAME					    VARCHAR2(513)
 FILE_ID					    NUMBER
 TABLESPACE_NAME				    VARCHAR2(30)
 BYTES						    NUMBER
 BLOCKS 					    NUMBER
 STATUS 					    VARCHAR2(9)
 RELATIVE_FNO					    NUMBER
 AUTOEXTENSIBLE 				    VARCHAR2(3)
 MAXBYTES					    NUMBER
 MAXBLOCKS					    NUMBER
 INCREMENT_BY					    NUMBER
 USER_BYTES					    NUMBER
 USER_BLOCKS					    NUMBER
 ONLINE_STATUS					    VARCHAR2(7)
SQL> desc v$datafile;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 FILE#						    NUMBER
 CREATION_CHANGE#				    NUMBER
 CREATION_TIME					    DATE
 TS#						    NUMBER
 RFILE# 					    NUMBER
 STATUS 					    VARCHAR2(7)
 ENABLED					    VARCHAR2(10)
 CHECKPOINT_CHANGE#				    NUMBER
 CHECKPOINT_TIME				    DATE
 UNRECOVERABLE_CHANGE#				    NUMBER
 UNRECOVERABLE_TIME				    DATE
 LAST_CHANGE#					    NUMBER
 LAST_TIME					    DATE
 OFFLINE_CHANGE#				    NUMBER
 ONLINE_CHANGE# 				    NUMBER
 ONLINE_TIME					    DATE
 BYTES						    NUMBER
 BLOCKS 					    NUMBER
 CREATE_BYTES					    NUMBER
 BLOCK_SIZE					    NUMBER
 NAME						    VARCHAR2(513)
 PLUGGED_IN					    NUMBER
 BLOCK1_OFFSET					    NUMBER
 AUX_NAME					    VARCHAR2(513)
 FIRST_NONLOGGED_SCN				    NUMBER
 FIRST_NONLOGGED_TIME				    DATE
 FOREIGN_DBID					    NUMBER
 FOREIGN_CREATION_CHANGE#			    NUMBER
 FOREIGN_CREATION_TIME				    DATE
 PLUGGED_READONLY				    VARCHAR2(3)
 PLUGIN_CHANGE# 				    NUMBER
 PLUGIN_RESETLOGS_CHANGE#			    NUMBER
 PLUGIN_RESETLOGS_TIME				    DATE
SQL> desc dba_tablespace_groups;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 GROUP_NAME				   NOT NULL VARCHAR2(30)
 TABLESPACE_NAME			   NOT NULL VARCHAR2(30)
SQL> desc dba_temp_files;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 FILE_NAME					    VARCHAR2(513)
 FILE_ID					    NUMBER
 TABLESPACE_NAME			   NOT NULL VARCHAR2(30)
 BYTES						    NUMBER
 BLOCKS 					    NUMBER
 STATUS 					    VARCHAR2(7)
 RELATIVE_FNO					    NUMBER
 AUTOEXTENSIBLE 				    VARCHAR2(3)
 MAXBYTES					    NUMBER
 MAXBLOCKS					    NUMBER
 INCREMENT_BY					    NUMBER
 USER_BYTES					    NUMBER
 USER_BLOCKS					    NUMBER
SQL> desc v$tempfile;
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 FILE#						    NUMBER
 CREATION_CHANGE#				    NUMBER
 CREATION_TIME					    DATE
 TS#						    NUMBER
 RFILE# 					    NUMBER
 STATUS 					    VARCHAR2(7)
 ENABLED					    VARCHAR2(10)
 BYTES						    NUMBER
 BLOCKS 					    NUMBER
 CREATE_BYTES					    NUMBER
 BLOCK_SIZE					    NUMBER
 NAME						    VARCHAR2(513)








