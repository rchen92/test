##创建用户
##查看当前用户的权限
##查看当前用户的角色
##创建用户的语法
##修改用户属性
##删除用户
##Oracle数据库用户的权限
	##系统权限的描述
	##系统权限的授予
	##授予系统权限的例子
	##系统权限的回收
	##查看权限和角色
	##对象权限




用户的相关属性
在数据库中各种对象被以用户（方案）的方式组织管理
在创建对象和访问对象前，首先创建对象的拥有者―――用户
用户有相关的属性，有些必须明确设置，有些可以用默认值
下面是用户的相关属性：
	用户名
	口令
	默认表空间
	临时表空间
	账户状态
	空间配额
	概要文件
其中用户名和口令是必须设置的

SQL> select distinct object_type from dba_objects;

user.objects ---> schema

创建用户：
	1、确定用户对象在表空间上的分布，从而确定表空间配额
	2、确定用户的默认表空间和临时表空间
	3、确定用户的口令管理规则和资源闲置规则，设置profile
	4、创建用户，设置口令，并设置用户的其他属性
	5、给用户赋予必要的角色
	6、给用户赋予其他的直接权限

2、 create user u1 identified by u1;  --->  users temp
	create user u2 identified by u2 default tablespace u2 temporary tablespace tempu2;  --->  u2   tempu2
5、 grant create session to u1;
	grant connect,resource to u1;
SQL> conn scott/scott
Connected.
SQL> select * from session_privs;		#查看当前用户的权限
PRIVILEGE
----------------------------------------
CREATE SESSION
UNLIMITED TABLESPACE
CREATE TABLE
CREATE CLUSTER
CREATE SEQUENCE
CREATE PROCEDURE
CREATE TRIGGER
CREATE TYPE
CREATE OPERATOR
CREATE INDEXTYPE
SQL> select * from session_roles;		#查看当前用户的角色
ROLE
------------------------------
CONNECT
RESOURCE


#创建用户的语法：
CREATE USER username IDENTIFIED BY password [DEFAULT TABLESPACE default_tablespace] [TEMPORARY TABLESPACE temporary_tablespace] [QUOTA nM ON tablespace_name] [PASSWORD EXPIRE] [ACCOUNT LOCK|UNLOCK] [PROFILE profile_name];

#修改用户属性
用户的大多数属性是可以被修改的，只有用户名称不能修改
修改用户属性的例子：
	修改用户口令：ALTER USER testuser IDENTIFIED BY testuser;
	重设用户的默认和临时表空间：ALTER USER testuser DEFAULT TABLESPACE system TEMPORARY TABLESPACE temp;
	锁定用户账户：ALTER USER testuser ACCOUNT LOCK;
	解锁用户账户：ALTER USER testuser ACCOUNT UNLOCK;
	让用户账户口令过期：ALTER USER testuser PASSWORD EXPIRE;

#删除用户
如果用户不再需要，可以使用DROP命令删除用户
	DROP USER testuser;
如果用户方案中包含了对象，则必须使用CASCADE子句，表示删除用户的同时删除了用户方案中包含的所有对象
	DROP USER testuser CASCADE;
当前已经连接的用户不能被删除

#Oracle数据库用户的权限
权限是用户确保数据安全性的，有两种安全性保障需要通过权限提供：
	系统安全
	数据安全
为了实现数据库的安全性，Oracle提供了两种类型的用户权限：
	系统权限：使用户在数据库中能够执行特定的对象
	对象权限：使用户可以访问和操作特定的对象
为了是用户能够具有某种权限，执行相应的任务，DBA可以通过GRANT命令将权限授予一个用户或者一组用户
DBA也可以通过REVOKE命令将权限从用户身上移走

	#系统权限的描述
		用户对数据库进行操作，首先需要具有相应系统权限，没有系统权限，用户对数据库就无法访问
		在不用的版本中有不同的系统权限
		在系统权限中有一类包含ANY关键字的权限，这种权限代表用户对所有用户的方案对象中都有某个特定权限
		通常数据库管理员sys和system具有较高的系统权限，能够完成很多管理任务：
			创建新的用户
			删除用户
			创建表空间
			删除日志组
			给用户赋予或一处权限等
	#系统权限的授予
		一旦用户被创建，DBA就需要给用户授予特定的系统权限，授予系统权限的语法如下：
			GRANT privilege [,privilege...] TO user[, user]|role|PUBLIC... [WITH ADMIN OPTION];
		其中，WITH ADMIN OPTION选项可以将授予能力进一步传递下去，即在你能够授予用户的基础上，他能将权限授予给其他人
			1、with admin option
			with admin option的意思是被授予该权限的用户有权将某个权限(如create any table)授予其他用户或角色，取消是不级联的。
			如授予A系统权限create session with admin option,然后A又把create session权限授予B,但管理员收回A的create session权限时，B依然拥有create session的权限。但管理员可以显式收回B create session的权限，即直接revoke create session from B.
			2、with grant option
			with grant option的意思是：权限赋予/取消是级联的，如将with grant option用于对象授权时，被授予的用户也可把此对象权限授予其他用户或角色，不同的是但管理员收回用with grant option授权的用户对象权限时，权限会因传播而失效，如grant select on table with grant option to A,A用户把此权限授予B，但管理员收回A的权限时，B的权限也会失效，但管理员不可以直接收回B的SELECT ON TABLE 权限。	
		通常，一个应用用户至少会有下面的一些系统权限：
			CREATE SESSION
			ALTER SESSION
			CREATE TABLE
			CREATE SEQUENCE
			CREATE VIEW
			CREATE PROCEDURE
			UNLIMITED TABLESPACE
		SYSDBA和SYSOPER是两种特权身份，也代表了一系列特殊的权限，这些权限不能直接授予用户，只能通过特权身份传递
		SYSDBA和SYSOPER这两种身份所代表的权限如下：
			SYSOPER：
				STARTUP
				SHUTDOWN
				ALTER DATABASE OPEN|MOUNT
				ALTER DATABASE BACKUP CONTROLFILE TO
				RECOVER DATABASE
				ALTER DATABASE ARCHIVELOG
				RESTRICTED SESSION
			SYSDBA：
				SYSOPER PRIVILEGES WITH ADMIN OPTION
				CREATE DATABASE
				ALTER TABLESPACE BEGIN/END BACKUP
				RECOVER DATABASE UNTIL
	#授予系统权限的例子
		可以一次将多个权限授予用户：
			GRANT CREATE SESSION, CREATE TABLE, CREATE SEQUENCE, CREATE VIEW, CREATE PROCEDURE, UNLIMITED TABLESPACE TO testuser;
		可以在授予系统权限的同时将权限的授予能力给用户
			GRANT ALTER SESSION,CREATE SESSION TO testuser WITH ADMIN OPTION;
	#系统权限的回收
		如果用户不在需要某些系统权限，可以通过REVOKE命令从用户上移除
		系统管理员SYS和SYSTEM都具有移除权限的能力，另外，具有ADMIN OPTION选项的用户也可以移除系统权限
		系统权限具有级联授予，非级联移除的特性
		移除系统权限的语法：
			REVOKE privilege [,privilege...] FROM user[, user...]|role|PUBLIC;
		下面的例子：从testuser用户移除创建表的权限：
			REVOKE CREATE TABLE FROM testuser;
SQL> CREATE USER u1 IDENTIFIED BY u1;
SQL> GRANT CONNECT,RESOURCE TO u1;
SQL> GRANT ALTER SESSION TO u1 WITH ADMIN OPTION;		#将ALTER  SESSION的权限级联授予u1
SQL> CREATE USER u2 IDENTIFIED BY u2;
SQL> CONN u1/u1;
Connected.
SQL> GRANT ALTER SESSION TO u2;			#现在u1就能给u2授予ALTER SESSION的权限
SQL> CONN / AS SYSDBA
Connected.
SQL> GRANT CONNECT,RESOURCE TO U2;
	#查看权限和角色
		user_sys_privs	系统权限
		role_sys_privs	系统role权限
		session_privs	session_roles
SQL> CONN u1/u1
SQL> SELECT * FROM USER_SYS_PRIVS			#当前用户的系统权限
USERNAME		       PRIVILEGE				ADM
------------------------------ ---------------------------------------- ---
U1			       UNLIMITED TABLESPACE			NO
U1			       ALTER SESSION				YES
SQL> SELECT * FROM ROLE_SYS_PRIVS;			#当前用户的系统role权限
ROLE			       PRIVILEGE				ADM
------------------------------ ---------------------------------------- ---
RESOURCE		       CREATE SEQUENCE				NO
RESOURCE		       CREATE TRIGGER				NO
RESOURCE		       CREATE CLUSTER				NO
RESOURCE		       CREATE PROCEDURE 			NO
RESOURCE		       CREATE TYPE				NO
CONNECT 		       CREATE SESSION				NO
RESOURCE		       CREATE OPERATOR				NO
RESOURCE		       CREATE TABLE				NO
RESOURCE		       CREATE INDEXTYPE 			NO
SQL> CONN / AS SYSDBA
Connected.
SQL> REVOKE ALTER SESSION FROM u1;
SQL> REVOKE ALTER SESSION FROM u2;
SQL> REVOKE RESOURCE FROM u2;


	#对象权限




