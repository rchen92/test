##PL/SQL对象
##匿名plsql块
	##静态输出
	##动态sql，输出单个列
	##动态输出多个列
	##复合变量
	##%type变量
	##rowtype
	##游标和循环语句
	##控制结构
		##使用if...then...else
		##使用case...then...else
##有名字的plsql块
	##静态输出
	##显示多个列
	##通过过程
##包
##触发器
	##替代触发
#管理plsql，需要关注的信息



PL/SQL对象
PL/SQL数据库对象有许多类型：
	程序包
	程序包体
	类型主体
	过程
	函数
	触发器

PL/SQL包括有名字的匿名块和有名字的plsql块
	匿名块的结构是declare（声明变量）
		declare
		[...定义变量...]
		begin
		plsql语句
		end;
		/
	有名字的plsql块
		create or replace <>
		is|as
		[......]
		begin
		......
		end;
		/


#匿名plsql块
#静态输出
SQL> conn scott/scott
Connected.
SQL> select ename from emp where empno=7839;
ENAME
----------
KING
SQL> set serveroutput on 
SQL> declare
  2  vename varchar2(15);
  3  begin
  4  select ename into vename from emp where empno=7839;
  5  dbms_output.put_line(vename);
  6  end;
  7  /
KING			#现在就输出KING了
PL/SQL procedure successfully completed.
SQL> save /tmp/p1
[oracle@oracle58 ~]$ vim /tmp/p1.sql
set serveroutput on
declare
vename varchar2(15);
vempno number:=&1;
begin
select ename into vename from emp where empno=vempno;		#输入变量
dbms_output.put_line(vename);
end;
/
SQL> start /tmp/p1.sql
Enter value for 1: 7839			#输入7839
old   3: vempno number:=&1;
new   3: vempno number:=7839;
KING							#结果输出了
PL/SQL procedure successfully completed.
SQL> set verify off				#让其不显示旧值，新值
SQL> start /tmp/p1.sql
Enter value for 1: 7839
KING
SQL> start /tmp/p1.sql 7839		#直接在执行脚本的时候传递参数
KING
SQL> start /tmp/p1.sql 7566
JONES
#动态sql，输出单个列
SQL> declare
  2  vename varchar2(20);
  3  begin
  4  execute immediate 'select ename from emp where empno=7839' into vename;
  5  dbms_output.put_line(vename);
  6  end;
  7  /
KING
SQL> save /tmp/p2
[oracle@oracle58 ~]$ vim /tmp/p2.sql 
declare
vename varchar2(20);
begin
execute immediate 'select ename from emp where empno=:1' into vename using 7839;
dbms_output.put_line(vename);
end;
/
SQL> start /tmp/p2.sql
KING
[oracle@oracle58 ~]$ vim /tmp/p2.sqldeclare
vename varchar2(20);
vempno number:=&1;
begin
execute immediate 'select ename from emp where empno=:1' into vename using vempno;
dbms_output.put_line(vename);
end;
/
SQL> start /tmp/p2.sql 7839
KING
SQL> start /tmp/p2.sql 7566
JONES
#输出的列有多个，如何调用。可以使用plsql里面的多个变量
SQL> select ename,sal from emp where empno=7839;
ENAME		  SAL
---------- ----------
KING		 5000
[oracle@oracle58 ~]$ vim /tmp/p1.sql 
set serveroutput on
declare
vename varchar2(15);
vsal number;
vempno number:=&1;
begin
select ename,sal into vename,vsal from emp where empno=vempno;
dbms_output.put_line(vename||' '||vsal);
end;
/
SQL> start /tmp/p1.sql 7839
KING 5000
#动态输出多个列
[oracle@oracle58 ~]$ vim /tmp/p2.sql
declare
vename varchar2(20);
vsal number;
vempno number:=&1;
begin
execute immediate 'select ename,sal from emp where empno=:1' into vename,vsal using vempno;
dbms_output.put_line(vename||' '||vsal);
end;
/
SQL> start /tmp/p2.sql 7839
KING 5000
#这种变量有点多，可以使用复合变量
SQL> declare
  2  type r1 is record(vename varchar2(20),vsal number);
  3  v_r r1;
  4  begin
  5  select ename,sal into v_r from emp where empno=&1;
  6  dbms_output.put_line(v_r.vename||' '||v_r.vsal);
  7  end;
  8  /
KING 5000
SQL> save /tmp/p3
SQL> start /tmp/p3.sql 7566
JONES 2975

#%type变量：自动匹配表的数据类型
[oracle@oracle58 ~]$ vim /tmp/p1.sql 
set serveroutput on
declare
vename emp.ename%type;
vsal emp.sal%type;
vempno number:=&1;
begin
select ename,sal into vename,vsal from emp where empno=vempno;
dbms_output.put_line(vename||' '||vsal);
end;
/
SQL> start /tmp/p1.sql 7566
JONES 2975
#rowtype：自动匹配表里面的行和列
[oracle@oracle58 ~]$ cp /tmp/p1.sql /tmp/p4.sql & vim /tmp/p4.sql
set serveroutput on
declare
vemp emp%rowtype;
vempno number:=&1;
begin
select * into vemp from emp where empno=vempno;
dbms_output.put_line(vemp.ename||' '||vemp.sal);
end;
/
SQL> start /tmp/p4.sql 7566
JONES 2975
#如果输出的行有多条该如何调用。可以使用游标和循环语句，使用的时候要注意游标的打开和关闭
SQL> select ename,sal from emp where deptno=10;
ENAME		  SAL
---------- ----------
CLARK		 2450
KING		 5000
MILLER		 1301
SQL> begin
  2  for i in (select ename,sal from emp where deptno=10) loop
  3  dbms_output.put_line(i.ename||' '||i.sal);
  4  end loop;
  5  end;
  6  /
SQL> save /tmp/p5
SQL> start /tmp/p5.sql
CLARK 2450
KING 5000
MILLER 1301
[oracle@oracle58 ~]$ vim /tmp/p5.sql
begin
for i in (select ename,sal from emp where deptno=10) loop
dbms_output.put_line(rpad(i.ename,12,' ')||' '||i.sal);			#让其对齐
end loop;
end;
/
SQL> start /tmp/p5.sql
CLARK	     2450
KING	     5000
MILLER	     1301
#控制结构
if...then...else...
case...then...else
	如果
	deptno=10   显示sal为sal*1.1
	deptno=20   显示sal为sal*1.2
	deptno=30	显示sal为sal*1.3
	其它的则不变
SQL> select ename,sal,decode(deptno,10,sal*1.1,20,sal*1.2,30,sal*1.3,sal) from emp;
ENAME		  SAL DECODE(DEPTNO,10,SAL*1.1,20,SAL*1.2,30,SAL*1.3,SAL)
---------- ---------- ---------------------------------------------------
SMITH		  800						      960
ALLEN		 1600						     2080
SQL> declare			#使用if...then...else
  2  vdeptno number;
  3  begin
  4  vdeptno:=&1;
  5  if vdeptno=10 then
  6  for a in (select ename,sal from emp where deptno=vdeptno) loop
  7  dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal);
  8  end loop;
  9  end if;
 10  end;
 11  /
SQL> save /tmp/p6			#先保存下来，然后再修改
[oracle@oracle58 ~]$ vim /tmp/p6.sql 
declare
vdeptno number;
begin
vdeptno:=&1;
if vdeptno=10 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.1);
end loop;
elsif vdeptno=20 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.2);
end loop;
elsif vdeptno=30 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.3);
end loop;
else
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal);
end loop;
end if;
end;
/
SQL> start /tmp/p6.sql 10
CLARK		2450 2695
KING		5000 5500
MILLER		1301 1431.1
SQL> start /tmp/p6.sql 20
SMITH		800 960
JONES		2975 3570
SCOTT		3000 3600
ADAMS		1100 1320
FORD		3000 3600
[oracle@oracle58 ~]$ cp /tmp/p6.sql /tmp/p7.sql & vim /tmp/p7.sql		#使用case...then...else
declare
vdeptno number;
begin
vdeptno:=&1;
case vdeptno when 10 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.1);
end loop;
when 20 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.2);
end loop;
when 30 then
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal||' '||a.sal*1.3);
end loop;
else
for a in (select ename,sal from emp where deptno=vdeptno) loop
dbms_output.put_line(rpad(a.ename,15,' ')||' '||a.sal);
end loop;
end case;
end;
/
SQL> start /tmp/p7.sql 20
SMITH		800 960
JONES		2975 3570
SCOTT		3000 3600
ADAMS		1100 1320
FORD		3000 3600


#有名字的plsql块
SQL> select getsal(7839) from dual;			#在输入这个查询语句之后，就得到员工7839的薪水
SQL> create or replace function getsal(vempno number)
  2  return number
  3  is
  4  vsal number;
  5  begin
  6  select sal into vsal from emp where empno=vempno;
  7  return vsal;
  8  end getsal;
  9  /
SQL> save /tmp/p8
Created file /tmp/p8.sql
SQL> select getsal(7839) from dual;
GETSAL(7839)
------------
	5000
SQL> select getsal(7566) from dual;
GETSAL(7566)
------------
	2975
SQL> select sal from emp where empno=7839;		#验证一下是否正确
       SAL
----------
      5000
SQL> select sal from emp where empno=7566;
       SAL
----------
      2975
#显示多个列
SQL> select ename,sal from emp where empno=7566;
ENAME		  SAL
---------- ----------
JONES		 2975
[oracle@oracle58 ~]$ vim /tmp/p8.sql 
create or replace function getsal(vempno number)
return varchar2
is
vename varchar2(20);
vsal number;
begin
select ename,sal into vename,vsal from emp where empno=vempno;
return (rpad(vename,15,' ')||' '||to_char(vsal));
end getsal;
/
SQL> start /tmp/p8.sql
Function created.
SQL> select getsal(7839) from dual;
GETSAL(7839)
--------------------------------------------------------------------------------
KING		5000
#通过过程
SQL> create or replace procedure gsal(vempno in number)
  2  is
  3  vename varchar2(15);
  4  vsal number;
  5  begin
  6  select ename,sal into vename,vsal from emp where empno=vempno;
  7  dbms_output.put_line(vename||' '||vsal);
  8  end gsal;
  9  /
SQL> save /tmp/p9
SQL> set serveroutput on;		#在有名字的plsql块中通过过程，则需要设置，让其显示输出结果
SQL> execute gsal(7839);		#现在就在输入员工的编号7839之后，输出员工的名字和薪水
KING 5000
[oracle@oracle58 ~]$ vim /tmp/p9.sql		#输入员工的编号，就把员工的薪水上涨500，并且把上涨之后的薪水打印出来
create or replace procedure gsal(vempno in number)
is
vename varchar2(15);
vsal number;
begin
update emp set sal=sal+500 where empno=vempno;
commit;
select ename,sal into vename,vsal from emp where empno=vempno;
dbms_output.put_line(vename||' '||vsal);
end gsal;
/
SQL> start /tmp/p9.sql
Procedure created.
SQL> select sal from emp where empno=7566;
       SAL
----------
      2975
SQL> execute gsal(7566);		#薪水已经改变了
JONES 3475
#输入01010000001，则显示(010)-10000001。输入020210000002，则显示(0202)-10000002
SQL> create or replace procedure phone(vno in out varchar2)
  2  is
  3  begin
  4  vno:='('||substr(vno,1,length(vno)-8)||')-'||substr(vno,-8);
  5  end phone;
  6  /
SQL> save /tmp/p10
SQL> declare
  2  vno varchar2(16):='&1';
  3  begin
  4  phone(vno);
  5  dbms_output.put_line(vno);
  6  end;
  7  /
Enter value for 1: 01010000001
old   2: vno varchar2(16):='&1';
new   2: vno varchar2(16):='01010000001';
(010)-10000001
SQL> save /tmp/p11
SQL> start /tmp/p11.sql
Enter value for 1: 020210000002
old   2: vno varchar2(16):='&1';
new   2: vno varchar2(16):='020210000002';
(0202)-10000002


#包
包头
create or replace package <> is|as
function ... return...;
procedure ...;
...
end <>;
/
包体
create or replace package body <> is|as
function ...
...
end <>
procedure ...
end <>;
end;
/
例如：实现p1.gsal(7566)执行后，得到ename,sal
		  p1.usal(7566)			   sal=sal+500
	  p1是包，gsal是个函数，usal是个过程
SQL> create or replace package p1 is
  2  function gsal(vempno number) return varchar2;
  3  procedure usal(vempno number);
  4  end p1;
  5  / 
SQL> save /tmp/p12
SQL> create or replace package body p1 is  
  2  function gsal(vempno number)
  3  return varchar2 is
  4  vename varchar2(15);
  5  vsal number;
  6  begin 
  7  select ename,sal into vename,vsal from emp where empno=vempno;
  8  return (rpad(vename,15,' ')||' '||to_char(vsal));
  9  end gsal;
 10  procedure usal(vempno in number)
 11  as
 12  begin
 13  update emp set sal=sal+500 where empno=vempno;
 14  commit;
 15  end usal;
 16  end p1;
 17  /
SQL> save /tmp/p12 append
SQL> select p1.gsal(7566) from dual;
P1.GSAL(7566)
--------------------------------------------------------------------------------
JONES		3475
SQL> exec p1.usal(7566);         
SQL> select p1.gsal(7566) from dual;
P1.GSAL(7566)
--------------------------------------------------------------------------------
JONES		3975


#触发器
create or replace trigger <>
before|after|instead of ...
begin
...
end;
/
例如：实现scott在什么时候登录了sqlplus，登录了就记录在一个表login表中，记录用户名和时间
SQL> create or replace trigger login_trig
  2  after logon on schema
  3  begin
  4  insert into login values(user,sysdate);
  5  end login_trig;
  6  /
SQL> save /tmp/p13
SQL> select * from login;
no rows selected
SQL> conn scott/scott
SQL> select * from login;
UNAME		     UTIME
-------------------- ---------
SCOTT		     01-DEC-16
SQL> conn scott/scott
SQL> select * from login;
UNAME		     UTIME
-------------------- ---------
SCOTT		     01-DEC-16
SCOTT		     01-DEC-16
SQL> select uname,to_char(utime,'yyyy-mm-dd hh24:mi:ss') utime from login;
UNAME		     UTIME
-------------------- -------------------
SCOTT		     2016-12-01 10:04:08
SCOTT		     2016-12-01 10:04:29
例如：实现emp表中，只要sal改变了，就保留在empsal表中的osal和nsal中
SQL> create table empsal as select sal osal,sal nsal from emp where 0=1;		#只要表结构
SQL> desc empsal
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 OSAL						    NUMBER(7,2)
 NSAL						    NUMBER(7,2)
SQL> create or replace trigger sal_trig
  2  before insert or update or delete of sal on emp for each row
  3  begin
  4  insert into empsal values(:old.sal,:new.sal);
  5  end sal_trig;
  6  /
SQL> save /tmp/p14
SQL> update emp set sal=sal+1 where empno=7566;
SQL> commit;
SQL> select * from empsal;
      OSAL	 NSAL
---------- ----------
      3975	 3976
SQL> insert into emp(empno,ename,sal) values(145,'A145',2000);
SQL> select * from empsal;
      OSAL	 NSAL
---------- ----------
      3975	 3976
			 2000
SQL> delete emp where empno=145;
SQL> select * from empsal;

      OSAL	 NSAL
---------- ----------
      3975	 3976
			 2000
      2000
#替代触发
例如：改视图不能改的时候，可以让其去改基表
SQL> create view v1 as select deptno,min(sal) msal from emp group by deptno;
SQL> select * from v1;
    DEPTNO	 MSAL
---------- ----------
	30			  950
	20			  800
	10			 1301
SQL> update v1 set msal=msal+1 where msal=800;		#修改视图不能修改
update v1 set msal=msal+1 where msal=800
       *
ERROR at line 1:
ORA-01732: data manipulation operation not legal on this view
SQL> update emp set sal=sal+1 where sal=800;		#但是能修改基表
SQL> select * from v1;
    DEPTNO	 MSAL
---------- ----------
	30			  950
	20			  801
	10			 1301
SQL> create or replace trigger v1_trig
  2  instead of insert or update or delete on v1
  3  begin
  4  update emp set sal=:old.msal+1 where sal=:old.msal;
  5  end;
  6  /
SQL> save /tmp/p15
Created file /tmp/p15.sql
SQL> select * from v1;
    DEPTNO	 MSAL
---------- ----------
	30	  950
	20	  801
	10	 1301
SQL> update v1 set msal=msal+1 where msal=801;		#现在不报错了
SQL> select * from v1;
    DEPTNO	 MSAL
---------- ----------
	30	  950
	20	  802
	10	 1301


#管理plsql，需要关注的信息
SQL> select object_name,object_type,status from user_objects where object_type in ('FUNCTION','PROCEDURE','TRIGGER','PACKAGE','PACEAGE BODY');
OBJECT_NAME				  OBJECT_TYPE	      STATUS
------------------------- ------------------- -------
GETSAL					  FUNCTION	      VALID
GSAL					  PROCEDURE	      VALID
PHONE					  PROCEDURE	      VALID
P1						  PACKAGE	      VALID
LOGIN_TRIG				  TRIGGER	      VALID
SAL_TRIG				  TRIGGER	      VALID
V1_TRIG 				  TRIGGER	      VALID
SQL> select object_name,object_type,status from user_objects where object_type in ('FUNCTION','PROCEDURE','TRIGGER','PACKAGE','PACEAGE BODY') and status <>'VALID';				#如果有状态不是VALID的，那么就需要注意了
no rows selected
#模拟一个错误
[oracle@oracle58 ~]$ vim /tmp/p9.sql
select ename,sala into vename,vsal from emp where empno=vempno;		#将sal改为了sala
SQL> start /tmp/p9.sql
Warning: Procedure created with compilation errors.
SQL> select object_name,object_type,status from user_objects where object_type in ('FUNCTION','PROCEDURE','TRIGGER','PACKAGE','PACEAGE BODY') and status <>'VALID';
OBJECT_NAME				  OBJECT_TYPE	      STATUS
------------------------- ------------------- -------
GSAL					  PROCEDURE			  INVALID		#现在就有INVALID，不正常了
SQL> alter procedure gsal compile;			#首先可以编译一下
Warning: Procedure altered with compilation errors.			#如果还报错，则可以show error
SQL> show error
Errors for PROCEDURE GSAL:
LINE/COL ERROR
-------- -----------------------------------------------------------------
8/1	 PL/SQL: SQL Statement ignored
8/14	 PL/SQL: ORA-00904: "SALA": invalid identifier			#在第8行14个字符有错误
SQL> select text from user_source where  name='GSAL';			#现在就需要读源代码了
TEXT
--------------------------------------------------------------------------------
procedure gsal(vempno in number)
is
vename varchar2(15);
vsal number;
begin
update emp set sal=sal+500 where empno=vempno;
commit;
select ename,sala into vename,vsal from emp where empno=vempno;
dbms_output.put_line(vename||' '||vsal);
end gsal;
10 rows selected.
#修改一下这个过程
SQL> create or replace procedure gsal(vempno in number)
is
vename varchar2(15);
vsal number;
begin
update emp set sal=sal+500 where empno=vempno;
commit;
select ename,sala into vename,vsal from emp where empno=vempno;
dbms_output.put_line(vename||' '||vsal);
end gsal;  2    3    4    5    6    7    8    9   10  /
 11  /
Warning: Procedure created with compilation errors.
SQL> save /tmp/p99    
Created file /tmp/p99.sql
[oracle@oracle58 ~]$ vim /tmp/p99.sql			#把sala修改为sal
create or replace procedure gsal(vempno in number)
is
vename varchar2(15);
vsal number;
begin
update emp set sal=sal+500 where empno=vempno;
commit;
select ename,sal into vename,vsal from emp where empno=vempno;		#把sala修改为sal
dbms_output.put_line(vename||' '||vsal);
end gsal;
/
SQL> start /tmp/p99.sql
SQL> select object_name,object_type,status from user_objects where object_type in ('FUNCTION','PROCEDURE','TRIGGER','PACKAGE','PACEAGE BODY') and status <>'VALID';
no rows selected
#但是如果源代码被加密了，则找开发人员解决











