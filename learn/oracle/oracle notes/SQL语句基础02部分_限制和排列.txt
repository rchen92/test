限制和排序
语法：
	SELECT 字段名,...
	FROM 表名
	WHERE 条件;
		#如果条件中出现字符和日期，则字符和日期必须用单引号，且字符区分大小写，日期格式敏感（默认的格式 DD-MON-RR，MON要是英文十二个月的简写）
---------------------------------------------
#求10号部门的员工编号，姓名，工资，部门号
	SQL> conn scott/oracle;
	SQL> DESC emp;
	 Name					   Null?    Type
	 ------------------------- -------- ---------------
	 EMPNO					   NOT NULL NUMBER(4)
	 ENAME								VARCHAR2(10)
	 JOB								VARCHAR2(9)
	 MGR								NUMBER(4)
	 HIREDATE							DATE
	 SAL								NUMBER(7,2)
	 COMM								NUMBER(7,2)
	 DEPTNO 							NUMBER(2)
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE deptno=10;					#这就把10号部门的查出来了

		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7782 CLARK			2450		 10
		  7839 KING 			5000		 10
		  7934 MILLER			1300		 10
-------------------
#查scott这个人
	SQL> DEFINE _EDITOR=vi
	SQL> ED
	SELECT empno,ename,sal,deptno
	FROM emp
	WHERE ename=scott
	/
	SQL> /				
	WHERE ename=scott
				*
	ERROR at line 3:
	ORA-00904: "SCOTT": invalid identifier
	#报错了，因为scott是关键字，关键字的格式是敏感的，要加单引号
		SQL> ED
		SELECT empno,ename,sal,deptno
		FROM emp
		WHERE ename='scott'
		/
		SQL> /
		no rows selected
	#显示为没有用户
		SQL> ed
		SELECT empno,ename,sal,deptno
		FROM emp
		/
		SQL> /
			 EMPNO ENAME	     SAL     DEPTNO
		---------- ---------- ---------- ----------
			  7369 SMITH	     800	 20
			  7499 ALLEN	    1600	 30
			  7521 WARD 	    1250	 30
			  7566 JONES	    2975	 20
			  7654 MARTIN	    1250	 30
			  7698 BLAKE	    2850	 30
			  7782 CLARK	    2450	 10
			  7788 SCOTT	    3000	 20
		#这里是有scott用户的，但是为什么查不到呢？
		#因为刚刚上面的条件scott是小写的，要改成大写的
	SQL> ed
	SELECT empno,ename,sal,deptno
	FROM emp
	WHERE ename='SCOTT'
	/
	SQL> /
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7788 SCOTT			3000		 20
	#添加一个用户做实验
		SQL> INSERT INTO emp (empno,ename,sal,deptno) values(99,Xiaohong,5000,10);
		INSERT INTO emp (empno,ename,sal,deptno) values(99,Xiaohong,5000,10)			#这里一定要加引号
														   *
		ERROR at line 1:
		ORA-00984: column not allowed here
		SQL> ed
		INSERT INTO emp (empno,ename,sal,deptno) values(99,'Xiaohong',5000,10)
		/
		SQL> /
		1 row created.
	#来查刚刚添加的用户
		SQL> SELECT empno,ename,sal,deptno
		  2  FROM emp
		  3  WHERE ename='XIAOHANG';
		WHERE ename='XIAOHANG'
					 *
		ERROR at line 3:				#报错
		ORA-01722: invalid number
		SQL> ed
		SELECT empno,ename,sal,deptno
		FROM emp
		WHERE ename='Xiaohong'			#这里应该按添加用户的时候的格式写，首字母大写，后面小写
		/
		SQL> /
			 EMPNO ENAME			 SAL     DEPTNO
		---------- ---------- ---------- ----------
				99 Xiaohong			5000		 10
		#说明在oracle里面，存储完数据之后，想查某个数据，只有用完全匹配（全匹配）才能查出来，模糊匹配是不行的。
		#在后面，不管是大写还是小写都能查出来，这就要用upper了，这个以后再说

------------------------------------------------
#求1981-1-1以后入职的员工的姓名，工资，入职时间
	#方法一：必须满足系统格式 DD-MON-RR
		SQL> SELECT ename,sal,hiredate
		  2  FROM emp
		  3  WHERE hiredate>1981-1-1;			#日期格式不对，而且没有加单引号
		WHERE hiredate>1981-1-1
					   *
		ERROR at line 3:
		ORA-01843: not a valid month
		SQL> ed
		SELECT ename,sal,hiredate
		FROM emp
		WHERE hiredate>'1-1-1981'
		/
		SQL> /
		WHERE hiredate>'1-1-1981'				#这种格式也不对
					   *
		ERROR at line 3:
		ORA-01843: not a valid month
		SQL> ed
		SELECT ename,sal,hiredate
		FROM emp
		WHERE hiredate>'1-JAN-1981'				#月要使用英文简写格式，不能用数字...
		/
		SQL> /
		ENAME		  SAL HIREDATE
		---------- ---------- ---------
		ALLEN		 1600 20-FEB-81
		WARD		 1250 22-FEB-81
		JONES		 2975 02-APR-81
		MARTIN		 1250 28-SEP-81
		BLAKE		 2850 01-MAY-81
		CLARK		 2450 09-JUN-81
		SCOTT		 3000 19-APR-87
	#方法二：可以借助一个函数to_date
		SQL> SELECT ename,sal,hiredate
		  2  FROM emp
		  3  where hiredate > to_date('1981-1-1','yyyy-mm-dd');		#这种就可以了，不过现实的时候还是月的简写
		ENAME			  SAL  HIREDATE
		---------- ---------- ---------
		ALLEN			 1600 20-FEB-81
		WARD			 1250 22-FEB-81
		JONES			 2975 02-APR-81
		MARTIN			 1250 28-SEP-81
		BLAKE			 2850 01-MAY-81

---------------------------------------
#between 小 and 大
#表示一个范围，在数值之间（可以等于）
-----------------------------------------------------
#例如：工资大于2000，小于3000的人，显示他们的员工编号，员工姓名，工资和部门编号
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE sal > 2000 and sal < 3000;
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7566 JONES			2975		 20
		  7698 BLAKE			2850		 30
		  7782 CLARK			2450		 10

	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE sal between 2000 and 3000;
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7566 JONES			2975		 20
		  7698 BLAKE			2850		 30
		  7782 CLARK			2450		 10
		  7788 SCOTT			3000		 20
		  7902 FORD 			3000		 20

-------------------------------------------
#in (列表)		等价于多个 or
#in的用法：在一个相同的列里面选择不同的行
-------------------------------------------------
#例子：求员工叫 scott，smith，king的员工的姓名，工资
	#第一种写法，最笨的一种方法
		SQL> SELECT ename,sal
		  2  FROM emp
		  3  WHERE ename='SCOTT';
		ENAME			  SAL
		---------- ----------
		SCOTT			 3000
		SQL> SELECT ename,sal
		  2  FROM emp
		  3  WHERE ename='SMITH';
		ENAME			  SAL
		---------- ----------
		SMITH			  800
		SQL> SELECT ename,sal
		  2  FROM emp
		  3  WHERE ename='KING';
		ENAME			  SAL
		---------- ----------
		KING			 5000
	#第二种写法，使用or
		SQL> SELECT ename,sal
		  2  FROM emp
		  3  WHERE ename='SCOTT' or ename='SMITH' or ename='KING';
		ENAME			  SAL
		---------- ----------
		SMITH			  800
		SCOTT			 3000
		KING			 5000
	#地三种写法，使用in
		SQL> SELECT ename,sal
		  2  FROM emp
		  3  WHERE ename in ('SCOTT','SMITH','KING');
		ENAME			  SAL
		---------- ----------
		SMITH			  800
		SCOTT			 3000
		KING			 5000

----------------------------------
#like，模糊匹配
#通配符	% denotes 匹配 zero or many characters
------------------------------------------------------------
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE ename like '%O%';
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7566 JONES			2975		 20
		  7788 SCOTT			3000		 20
		  7902 FORD 			3000		 20

	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE ename like '__O%';				#第三个字母为O的匹配，一个下划线表示一个字符
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7788 SCOTT			3000		 20

------------------------
#空做条件，NULL
--------------------------------------------------------------
#例如：那些没有获得奖金的，显示这些人的编号，姓名，工资，奖金，部门号
	SQL> SELECT empno,ename,sal,comm,deptno
	  2  FROM emp
	  3  WHERE comm is null;
		 EMPNO ENAME			 SAL       COMM		DEPTNO
	---------- ---------- ---------- ---------- ----------
			99 Xiaohong			5000					10
		  7369 SMITH			 800					20
		  7566 JONES			2975					20
		  7698 BLAKE			2850					30
		  7782 CLARK			2450					10
		  7788 SCOTT			3000					20
		  7839 KING 			5000					10
		  7876 ADAMS			1100					20
		  7900 JAMES			 950					30
		  7902 FORD 			3000					20
		  7934 MILLER			1300					10
		#但是奖金为0块的没有显示
	SQL> ed
	SELECT empno,ename,sal,comm,deptno
	FROM emp
	WHERE comm is null or comm=0
	/
	SQL> /
		 EMPNO ENAME			SAL        COMM		DEPTNO
	---------- ---------- ---------- ---------- ----------
			99 Xiaohong			5000					10
		  7369 SMITH			 800					20
		  7566 JONES			2975					20
		  7698 BLAKE			2850					30
		  7782 CLARK			2450					10
		  7788 SCOTT			3000					20
		  7839 KING 			5000					10
		  7844 TURNER			1500		  0			30
		  7876 ADAMS			1100					20
		  7900 JAMES			 950					30
		  7902 FORD 			3000					20
		  7934 MILLER			1300					10

#例如：那些有获得奖金的，显示这些人的编号，姓名，工资，奖金，部门号
	SQL> SELECT empno,ename,sal,comm,deptno
	  2  FROM emp
	  3  WHERE comm is not null;
		 EMPNO ENAME			 SAL       COMM		DEPTNO
	---------- ---------- ---------- ---------- ----------
		  7499 ALLEN			1600		300			30
		  7521 WARD 			1250		500			30
		  7654 MARTIN			1250       1400			30
		  7844 TURNER			1500		  0			30
	SQL> ed
	SELECT empno,ename,sal,comm,deptno
	FROM emp
	WHERE comm is not null and comm <> 0
	/
	SQL> /
		 EMPNO ENAME			 SAL       COMM		DEPTNO
	---------- ---------- ---------- ---------- ----------
		  7499 ALLEN			1600		300			30
		  7521 WARD 			1250		500			30
		  7654 MARTIN			1250       1400			30

--------------------------------------------------------------------------------
#当条件中出现多个条件（在不少书上也叫出现多个逻辑运算符）的时候，用 and or 连接
# and 并且， or 或者
-----------------------------------------------------------
#例如；求工资大于3000或者姓名中含有O的员工编号，姓名，工资，部门编号
	SQL> SELECT empno,ename,sal,deptno 
	  2  FROM emp
	  3  WHERE sal>3000 or ename like '%O%';
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
			99 Xiaohong			5000		 10
		  7566 JONES			2975		 20
		  7788 SCOTT			3000		 20
		  7839 KING 			5000		 10
		  7902 FORD 			3000		 20

#重点：默认 and 优先于 or
----------------------------------
	SQL> conn hr/oracle;
	Connected.
	SQL> show user;
	USER is "HR"
	SQL> SELECT last_name,job_id,salary
	  2  FROM employees
	  3  WHERE job_id='SA_REP' or job_id='AD_PRES' and salary>15000;
	LAST_NAME		  JOB_ID	 SALARY
	------------------------- ---------- ----------
	King			  AD_PRES	  24000
	Tucker			  SA_REP	  10000
	Bernstein		  SA_REP	   9500
	Hall			  SA_REP	   9000
	Olsen			  SA_REP	   8000
	......
	31 rows selected.
	SQL> SELECT last_name,job_id,salary
	  2  FROM employees
	  3  WHERE job_id='AD_PRES' or job_id='SA_REP' and salary>9000
	LAST_NAME		  JOB_ID	 SALARY
	------------------------- ---------- ----------
	King			  AD_PRES	  24000
	Tucker			  SA_REP	  10000
	Bernstein		  SA_REP	   9500
	King			  SA_REP	  10000
	Sully			  SA_REP	   9500
	......
	11 rows selected.

---------------------------
#排序：ORDER BY
#升序 asc，默认可以省略
#降序 desc
#语法规则：
	SELECT ...
	FROM ...
	WHERE ...
	ORDER BY 字段名 asc/desc
----------------------------------------
#例如：按姓名排序
	SQL> conn scott/oracle;
	Connected.
	SQL> SELECT empno,ename,sal
	  2  FROM emp
	  3  ORDER BY ename asc;			#这种是按姓名的首字母排序
		 EMPNO ENAME			 SAL
	---------- ---------- ----------
		  7876 ADAMS			1100
		  7499 ALLEN			1600
		  7698 BLAKE			2850
		  7782 CLARK			2450
		  7902 FORD 			3000
		  7900 JAMES			 950
		  7566 JONES			2975
		  7839 KING 			5000
		  7654 MARTIN			1250
		  7934 MILLER			1300
		  7788 SCOTT			3000
		  7369 SMITH			 800
		  7844 TURNER			1500
		  7521 WARD 			1250
			99 Xiaohong			5000

#例如：按照工资从高到低显示10号部门的员工的信息
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE deptno=10
	  4  ORDER BY sal desc;
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
			99 Xiaohong			5000		 10
		  7839 KING 			5000		 10
		  7782 CLARK			2450		 10
		  7934 MILLER			1300		 10
#扩展例子：按照别名排序
------------------------------
	SQL> SELECT ename,sal salary
	  2  FROM emp
	  3  WHERE deptno=10
	  4  ORDER BY salary desc;
	ENAME	       SALARY
	---------- ----------
	Xiaohong		 5000
	KING			 5000
	CLARK			 2450
	MILLER			 1300

#按照位置变量排序
#SELECT的后面第一个字段的位置变量是1，第二个字段的位置变量是2...
--------------------------------------------
	SQL> SELECT empno,ename,sal
	  2  FROM emp
	  3  WHERE deptno=10
	  4  ORDER BY 2 desc;
		 EMPNO ENAME			 SAL
	---------- ---------- ----------
			99 Xiaohong			5000
		  7934 MILLER			1300
		  7839 KING 			5000
		  7782 CLARK			2450
	SQL> SELECT empno,ename,sal
	  2  FROM emp
	  3  WHERE deptno=10
	  4  ORDER BY 3 desc;
		 EMPNO ENAME			 SAL
	---------- ---------- ----------
			99 Xiaohong			5000
		  7839 KING 			5000
		  7782 CLARK			2450
		  7934 MILLER			1300

#扩展练习：先按部门编号升序排列，然后再部门编号相同的情况下按照工资降序排列
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  ORDER BY deptno asc and ORDER BY sal desc;
	ORDER BY deptno asc and ORDER BY sal desc
						*
	ERROR at line 3:
	ORA-00933: SQL command not properly ended

	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  ORDER BY deptno asc and ORDER BY sal desc;
	ORDER BY deptno asc and sal desc
						*
	ERROR at line 3:
	ORA-00933: SQL command not properly ended

	SQL> ed
	SELECT empno,ename,sal,deptno
	FROM emp
	ORDER BY deptno asc,sal desc
	/
	SQL> /
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
			99 Xiaohong			5000		 10
		  7839 KING 			5000		 10
		  7782 CLARK			2450		 10
		  7934 MILLER			1300		 10
		  7902 FORD 			3000		 20
		  7788 SCOTT			3000		 20
		  7566 JONES			2975		 20
		  7876 ADAMS			1100		 20
		  7369 SMITH			 800		 20
		  7698 BLAKE			2850		 30
		  7499 ALLEN			1600		 30
		  7844 TURNER			1500		 30
		  7654 MARTIN			1250		 30
		  7521 WARD 			1250		 30
		  7900 JAMES			 950		 30
#注意：只有在第一个列有相同的值，才按照第二列排序，依次类推
#这句好一定要详细看，看3遍。这个在工作中常用

--------------
#变量
----------------------------------------------------------------------
#先来看一个例子：假设我们分别求SCOTT，SMITH，KING三个人的工资，该怎么做？
#之前使用的or和and，这里用变量
	SQL> SELECT sal FROM emp WHERE ename='&name';
	Enter value for name: KING						#这里输入KING
	old   1: SELECT sal FROM emp WHERE ename='&name'
	new   1: SELECT sal FROM emp WHERE ename='KING'
		   SAL
	----------
		  5000
	SQL> /
	Enter value for name: SMITH						#输入SMITH
	old   1: SELECT sal FROM emp WHERE ename='&name'
	new   1: SELECT sal FROM emp WHERE ename='SMITH'
		   SAL
	----------
		   800
	SQL> /
	Enter value for name: SCOTT						#输入SCOTT
	old   1: SELECT sal FROM emp WHERE ename='&name'
	new   1: SELECT sal FROM emp WHERE ename='SCOTT'
		   SAL
	----------
		  3000

#	&变量名，是临时变量，每次都要输入值
#	&&变量名，是会话变量，整个会话保存值，会话退出没有值
#	&可以出现在 SELECT 语句中的任何地方
-------------------------------------------------------------
	SQL> SELECT ename,sal,&&abc
	  2  FROM emp
	  3  WHERE ename='&name';
	Enter value for abc: deptno			#输入deptno
	old   1: SELECT ename,sal,&&abc
	new   1: SELECT ename,sal,deptno
	Enter value for name: SCOTT			#输入SCOTT
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SCOTT'
	ENAME			  SAL	  DEPTNO
	---------- ---------- ----------
	SCOTT			3000	      20
	SQL> /
	old   1: SELECT ename,sal,&&abc
	new   1: SELECT ename,sal,deptno	#这里deptno已经不能输入了
	Enter value for name: KING			#但是姓名可以继续输入
	old   3: WHERE ename='&name'
	new   3: WHERE ename='KING'
	ENAME			  SAL	  DEPTNO
	---------- ---------- ----------
	KING			 5000	      10

#扩展：在脚本中，一般也使用变量，但是不允许交互
#先定义变量，然后再引用
#规则：
	DEFINE	定义变量
	UNDEFINE 取消变量
-----------------------------------------------
#例：定义变量
	SQL> DEFINE name='SCOTT' 
	SQL> SELECT ename,sal
	  2  FROM emp
	  3  WHERE ename='&name';		#这个地方可以发现，不需要输入SCOTT就可以了，并且下次执行此命令的时候，SCOTT会直接调用出来
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SCOTT'
	ENAME			  SAL
	---------- ----------
	SCOTT			 3000
	SQL> /
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SCOTT'
	ENAME			  SAL
	---------- ----------
	SCOTT			 3000
	SQL> SELECT empno,ename,sal,deptno
	  2  FROM emp
	  3  WHERE ename='&name';		#只要有调用name这个变量的，都会直接是SCOTT，不需要输入了
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SCOTT'
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7788 SCOTT			3000		 20
#例：取消变量
	SQL> UNDEFINE name SCOTT;
	SQL> /
	Enter value for name: KING			#需要输入姓名，KING
	old   3: WHERE ename='&name'
	new   3: WHERE ename='KING'
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7839 KING 			5000		 10
	SQL> /
	Enter value for name: SMITH			#输入姓名，SMITH
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SMITH'
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7369 SMITH			 800		 20

#扩展：有时候要关闭提示符
#SET VERIFY ON，显示提示符
#SET VERIFY OFF，关闭变量提示
-----------------------------------
	SQL> SET VERIFY OFF
	SQL> /
	Enter value for name: SMITH
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7369 SMITH			 800		 20
	SQL> SET VERIFY ON
	SQL> /
	Enter value for name: SMITH
	old   3: WHERE ename='&name'
	new   3: WHERE ename='SMITH'
		 EMPNO ENAME			 SAL     DEPTNO
	---------- ---------- ---------- ----------
		  7369 SMITH			 800		 20

#SET的规则其实很多
#SET feedback off;		禁止回显sql命令处理的记录条数（缺省/默认为on）
#SET heading off;		禁止输出标题（缺省为on）
#SET trimspool on;		去除spool输出结果中每行的结尾空格（缺省为on）
#SET pagesize 0;		禁止分页输出
#SET linesize 1000;		设置每行的字符输出个数为1000，防止换行（缺省为80）
#SET echo off;			不显示脚本中的每个sql命令（缺省为on）


---------------------------------------------------
#一个联通脚本：检查表空间的巡检脚本，最低端岗位
SELECT D.STATUS STATUS,
	   D.TABLESPACE_NAME NAME,
	   D.CONTENTSTYPE,
	   D.EXTENT_MANAGEMENT EXTENTMANAGEMENT,
	   TO_CHAR(NVL(A.BYTES/1024/1024,0),'99999990.900') TABLE_SIZE,
	   TO_CHAR(NVL(A.BYTES-NVL(F.BYTES,0),0)/1024/1024, '99999999.999') || '/' ||
	   TO_CHAR(NVL(A.BYTES/1024/1024,0),'99999999.999') USED,
	   TO_CHAR(NVL((A.BYTES-NVL(F.BYTES,0))/A.BYTES*100,0),'990.00') RATE
FROM SYS.DBA_TABLESPACESD,
	 (SELECT TABLESPACE_NAME,SUM(BYTES) BYTES
		FROM DBA_DATA_FILES
		GROUP BY TABLESPACE_NAME) A,
	 (SELECT TABLESPACE_NAME,SUM(BYTES) BYTES
		FROM DBA_FREE_SPACE
		GROUP BY TABLESPACE_NAME) F
WHERE D.TABLESPACE_NAME=A.TABLESPACE_NAME(+)
	AND D.TABLESPACE_NAME=F.TABLESPACE_NAME(+)
	AND NOT
		(D.EXTENT_MANAGEMENT LIKE 'LOCAL' AND D.CONTENTSLIKE 'TEMPORARY')
#脚本解释：查看每一个表空间的使用情况，其中如果一般表空间使用率大于93%，那么运行时KPI就会存在问题，此时就需要及时解决空间不足问题


	
	






