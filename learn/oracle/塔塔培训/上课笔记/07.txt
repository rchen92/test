[oracle@localhost ~]$ rman target /
RMAN> list backup;



show parameter DB_CREATE_FILE_DEST;

SQL> CREATE TABLESPACE RCAT_TS DATAFILE 
	  '+DATA' SIZE 100M AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED
	LOGGING
	ONLINE
	EXTENT MANAGEMENT LOCAL AUTOALLOCATE
	BLOCKSIZE 8K
	SEGMENT SPACE MANAGEMENT AUTO
	FLASHBACK ON;

	+DATA/ocp/datafile/rcat_ts.xxxxxxxx


SQL> CREATE USER rcowner IDENTIFIED BY password
	 TEMPORARY TABLESPACE temp
	  DEFAULT TABLESPACE rcat_ts
	  QUOTA UNLIMITED ON rcat_ts;
	 GRANT recovery_catalog_owner TO rcowner;


[oracle@oracle-server ~]$ rman target / CATALOG rcowner/password
RMAN> CREATE CATALOG;
RMAN> REGISTER DATABASE;
RMAN> backup database;


vi /oraclemgr/db_bak/rmanbaklevel0.sh

$ORACLE_HOME/bin/rman target / nocatalog cmdfile=/oraclemgr/db_bak/rmanbaklevel0.sql log=/oraclemgr/db_bak/rmanbaklevel0.log append
nocatalog 替换成catalog rcowner/password

RMAN> run {
crosscheck backup;
delete noprompt expired backup;
delete noprompt obsolete;
BACKUP database plus archivelog delete input;
}

RMAN> CREATE SCRIPT full_bak
{
crosscheck backup;
delete noprompt expired backup;
delete noprompt obsolete;
BACKUP database plus archivelog delete input;
}
LIST  SCRIPT NAMES;
PRINT [GLOBAL] SCRIPT script_name;
PRINT  SCRIPT full_bak;

RMAN> RUN { EXECUTE SCRIPT
full_bak
; }


RMAN> PRINT  SCRIPT full_bak;		这个脚本只对当前的库有效

printing stored script: full_bak
{
crosscheck backup;
delete noprompt expired backup;
delete noprompt obsolete;
BACKUP database plus archivelog delete input;
}


RMAN> CREATE GLOBAL SCRIPT full_bak		这个脚本对所有的库有效
{
crosscheck backup;
delete noprompt expired backup;
delete noprompt obsolete;
BACKUP database plus archivelog delete input;
}
RUN { EXECUTE GLOBAL SCRIPT
full_bak
; }










内存参数
--参数修改
alter system set memory_max_target=2000m scope=spfile;
alter system set memory_target   =1700m scope=both;
alter system set shared_pool_size=300m scope=both;

--判断要放入keep池的表的大小
with table_size as
(
    select owner, segment_name, BYTES from dba_segments where 
    (owner=upper('hr') and segment_name=upper('employees'))
    or
    (owner=upper('scott') and segment_name=upper('emp'))
    or
    (owner=upper('fspf_omms') and segment_name=upper('tbl_mcht_settle_dtl'))
),
index_info as 
(
  select owner,index_name from dba_indexes 
  where (TABLE_OWNER,TABLE_NAME) in (select owner, segment_name from table_size)
),
 index_size as
 (
 select owner, segment_name, BYTES from dba_segments 
 where (owner, segment_name) in (select owner,index_name  from index_info)
 ),
 table_index_size_detail as
 (
 select owner,segment_name,BYTES from table_size
 union all
 select owner,segment_name,BYTES from index_size
 )
  select sum(bytes)/1024/1024  table_index_size_mb from table_index_size_detail
  ;




--job建立
    --procedure
BEGIN
sys.dbms_scheduler.create_job( 
job_name => 'CASHBOX.job_INIT',
job_type => 'STORED_PROCEDURE',
job_action => 'CASHBOX.RP_ALL_ORDER_TRADE_WATER_INIT',
repeat_interval => 'FREQ=DAILY;BYHOUR=5;BYMINUTE=00;BYSECOND=0',
start_date => systimestamp at time zone 'Asia/Shanghai',
job_class =>'DEFAULT_JOB_CLASS',
comments => '钱盒账本初始化',
auto_drop => FALSE,
enabled => TRUE);
END;

--schedule job日志 最近7天;
select owner,JOB_NAME,STATUS, ACTUAL_START_DATE,RUN_DURATION,LOG_DATE,INSTANCE_ID,ADDITIONAL_INFO from DBA_SCHEDULER_JOB_RUN_DETAILS 
where owner=upper('TXY') and JOB_NAME=upper('JOB_PARTITION_ADD_AUTO') and ACTUAL_START_DATE>=trunc(sysdate)-7 order by log_id desc;


































